{"version":3,"sources":["components/keyboard/Keyboard.jsx","components/options/Options.jsx","components/square/Square.jsx","components/muncher/Muncher.jsx","components/notification/Notification.jsx","components/troggle/Troggle.jsx","components/board/Board.jsx","components/status/Status.jsx","components/game/Game.jsx","components/menu/Menu.jsx","objects/games.js","objects/Multiples.js","objects/Factors.js","objects/Primes.js","index.jsx"],"names":["Keyboard","props","up","down","left","right","space","enter","className","type","onClick","Options","listElements","options","map","option","index","selected","getGame","Square","cell","value","id","Muncher","display","muncherClass","undefined","ref","el","muncher","style","getBoundingClientRect","width","position","x","top","height","y","Notification","message","initializeTroggle","WIDTH","HEIGHT","Math","floor","random","abs","direction","Troggle","troggle","troggleClass","getRow","r","squares","row","int","push","Board","alert","troggles","notification","trim","theseTroggles","t","length","rows","getRows","Status","status","Game","game","state","level","score","lives","setupBoard","keyDown","bind","document","addEventListener","event","code","this","timer","setInterval","removeEventListener","clearInterval","resetNumber","Array","i","getFiller","response","ceil","addTroggle","remove","splice","moveTroggles","setState","troggleMuncherCheck","update","munch","checkLevel","moveMuncher","xc","yc","min","max","endGame","isValid","isCorrect","inputs","getError","munchers","getTitle","React","Component","Menu","select","movement","ReactDOM","render","getElementById","question","instructions","GAME_TYPES","Multiples","minNum","maxNum","maxMult","minMult","oldNumber","number","rand","round","nonMultiple","getMultiple","getNonMultiple","factor","getNumber","Factors","factors","from","_","filter","nonFactor","getFactor","getNonFactor","includes","Primes","primes","nonPrime","getPrime","getNonPrime"],"mappings":"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","file":"static/js/main.4a62a7c2.chunk.js","sourcesContent":["import React from 'react';\nimport './Keyboard.css';\n\nfunction Keyboard(props) {\n    const { up, down, left, right, space, enter } = props;\n    return (\n        <div className=\"keyboard\">\n            <button type=\"button\" className=\"enter\" onClick={enter}>\n                Enter\n            </button>\n            <button type=\"button\" className=\"up\" onClick={up}>\n                Up\n            </button>\n            <button type=\"button\" className=\"left\" onClick={left}>\n                Left\n            </button>\n            <button type=\"button\" className=\"right\" onClick={right}>\n                Right\n            </button>\n            <button type=\"button\" className=\"down\" onClick={down}>\n                Down\n            </button>\n            <button type=\"button\" className=\"space\" onClick={space}>\n                Space\n            </button>\n        </div>\n    );\n}\n\nexport default Keyboard;\n","import React from 'react';\nimport './Options.css';\n\nfunction Options(props) {\n    const { options } = props;\n    const listElements = options.map((option, index) => {\n        if (index === props.selected) {\n            return (\n                <li key={option.getGame()} className=\"selected\">\n                    {option.getGame()}\n                </li>\n            );\n        }\n        return <li key={option.getGame()}>{option.getGame()}</li>;\n    });\n    return (\n        <div className=\"options\">\n            <ol>{listElements}</ol>\n        </div>\n    );\n}\n\nexport default Options;\n","import React from 'react';\nimport './Square.css';\n\nfunction Square(props) {\n    const { cell, value } = props;\n    return (\n        <div key={cell} id={`c${cell}`} className=\"square\">\n            {value}\n        </div>\n    );\n}\n\nexport default Square;\n","import React from 'react';\nimport './Muncher.css';\n\nfunction Muncher(props) {\n    const { display } = props;\n    let muncherClass = 'muncher';\n    if (display !== undefined) {\n        muncherClass = `${muncherClass} ${display}`;\n    }\n    return (\n        <div\n            ref={(el) => {\n                const muncher = el;\n                if (!muncher) return;\n                muncher.style.left = `${\n                    muncher.getBoundingClientRect().width * props.position.x\n                }px`;\n                muncher.style.top = `${\n                    muncher.getBoundingClientRect().height * props.position.y\n                }px`;\n            }}\n            className={muncherClass}\n        />\n    );\n}\n\nexport default Muncher;\n","import React from 'react';\nimport './Notification.css';\n\nfunction Notification(props) {\n    const { message } = props;\n    return (\n        <div className=\"notification\">\n            {message}\n            <br />\n            Press Space Bar to continue.\n        </div>\n    );\n}\n\nexport default Notification;\n","import React from 'react';\nimport './Troggle.css';\n\n/**\n * A method for handling the rendering of a troggle\n * In general a troggle has 3 different properties associated with it:\n * - position (x,y) object\n * - troggle (scientific name)\n * - movement (for some, as (x,y) object)\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\nfunction Troggle(props) {\n    const { position, troggle } = props;\n    const troggleClass = `troggle ${troggle}`;\n    return (\n        <div\n            ref={(el) => {\n                const troggle = el;\n                if (!troggle) return;\n                troggle.style.left = `${\n                    troggle.getBoundingClientRect().width * position.x\n                }px`;\n                troggle.style.top = `${\n                    troggle.getBoundingClientRect().height * position.y\n                }px`;\n            }}\n            className={troggleClass}\n        />\n    );\n}\n\nfunction moveTroggles(troggles, WIDTH, HEIGHT) {\n    const remove = [];\n    // move any existing troggles\n    for (let t = 0; t < troggles.length; t++) {\n        const troggle = troggles[t];\n        if (troggle.position !== undefined) {\n            troggle.position.x += troggle.direction.x;\n            troggle.position.y += troggle.direction.y;\n            if (\n                troggle.position.x < 0 ||\n                troggle.position.y < 0 ||\n                troggle.position.x > WIDTH - 1 ||\n                troggle.position.y > HEIGHT - 1\n            ) {\n                remove.push(t);\n            }\n        }\n    }\n    // remove any unneeded troggles\n    for (let i = 0; i < remove.length; i++) {\n        troggles.splice(i, 1);\n    }\n    return troggles;\n}\n\nfunction initializeTroggle(WIDTH, HEIGHT) {\n    let x = Math.floor(Math.random() * WIDTH);\n    let y = Math.floor(Math.random() * HEIGHT);\n    if (x > 0 && x < WIDTH - 1) {\n        y = Math.abs(HEIGHT - 1 - y) < Math.abs(0 - y) ? HEIGHT - 1 : 0;\n    }\n    if (y > 0 && y < HEIGHT - 1) {\n        x = Math.abs(WIDTH - 1 - x) < Math.abs(0 - x) ? WIDTH - 1 : 0;\n    }\n    let direction; // TODO - decide direction/movement based on troggle\n    if (x === 0) {\n        direction = { x: 1, y: 0 };\n    } else if (x === WIDTH - 1) {\n        direction = { x: -1, y: 0 };\n    } else if (y === 0) {\n        direction = { x: 0, y: 1 };\n    } else {\n        direction = { x: 0, y: -1 };\n    }\n    return { position: { x, y }, direction };\n}\n\nfunction addTroggle(troggles, level, WIDTH, HEIGHT) {\n    let status = '';\n    // initialize any open troggles\n    for (let t = 0; t < troggles.length; t++) {\n        const troggle = troggles[t];\n        if (troggle.position === undefined) {\n            const { position, direction } = initializeTroggle(WIDTH, HEIGHT);\n            troggle.position = position;\n            troggle.direction = direction;\n        }\n    }\n    // we should consider adding a troggle if the troggle count is less than twice the level (rounded up)\n    if (troggles.length < Math.ceil(level / 2) && Math.random() < 0.2) {\n        troggles.push({ troggle: 'normalus' }); // TODO - decide which monster to deploy based on level\n        status = 'Troggle!';\n    }\n    return { troggles, status };\n}\n\nexport default Troggle;\nexport { moveTroggles, addTroggle, initializeTroggle };\n","import React from 'react';\nimport Square from '../square/Square';\nimport './Board.css';\nimport Muncher from '../muncher/Muncher';\nimport Notification from '../notification/Notification';\nimport Troggle from '../troggle/Troggle';\n\nfunction Board(props) {\n    const { height, width, squares, muncher, troggles, notification } = props;\n    let alert;\n    if (notification != null && notification.trim() !== '') {\n        alert = <Notification message={notification} />;\n    }\n    const theseTroggles = [];\n    for (let t = 0; t < troggles.length; t++) {\n        const troggle = troggles[t];\n        if (troggle.position !== undefined) {\n            theseTroggles.push(\n                <Troggle\n                    key={t}\n                    position={troggle.position}\n                    troggle={troggle.troggle}\n                />\n            );\n        }\n    }\n    const rows = getRows(height, width, squares);\n    return (\n        <div className=\"board\">\n            <Muncher position={muncher} display={muncher.display} />\n            {theseTroggles}\n            {alert}\n            {rows}\n        </div>\n    );\n}\n\nfunction getRows(height, width, squares) {\n    const rows = [];\n    for (let r = 0; r < height; r++) {\n        const row = getRow(width, r, squares);\n        rows.push(\n            <div key={`row${r}`} className=\"board-row\">\n                {row}\n            </div>\n        );\n    }\n    return rows;\n}\n\nfunction getRow(width, r, squares) {\n    const row = [];\n    for (let cell = 0; cell < width; cell++) {\n        const int = r * width + cell;\n        row.push(<Square key={`c${int}`} cell={int} value={squares[int]} />);\n    }\n    return row;\n}\n\nexport default Board;\nexport { getRows, getRow };\n","import React from 'react';\nimport './Status.css';\n\nfunction Status(props) {\n    const { status } = props;\n    let message = '';\n    if (status !== undefined && status !== '') {\n        message = <div className=\"status\">{status}</div>;\n    }\n    return message;\n}\n\nexport default Status;\n","import React from 'react';\nimport './Game.css';\nimport Board from '../board/Board';\nimport Keyboard from '../keyboard/Keyboard';\nimport { addTroggle, moveTroggles } from '../troggle/Troggle';\nimport Status from '../status/Status';\n\nconst WIDTH = 6;\nconst HEIGHT = 5;\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        const { game } = props;\n        const muncher = { x: 2, y: 2 };\n        this.state = {\n            game,\n            level: 1,\n            score: 0,\n            lives: 3,\n            notification: '',\n            status: '',\n            muncher,\n            troggles: [],\n            squares: this.setupBoard(game, muncher),\n        };\n\n        this.keyDown = this.keyDown.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', (event) => {\n            this.keyDown(event.code);\n        });\n        this.timer = setInterval(() => {\n            this.troggle();\n        }, 4000); // TODO - make this go faster based on the level/troggle\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.keyDown);\n        clearInterval(this.timer);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    setupBoard(game, muncher) {\n        game.resetNumber();\n        const squares = Array(WIDTH * HEIGHT);\n        squares[muncher.y * WIDTH + muncher.x] = '';\n        for (let i = 0; i < squares.length; i++) {\n            if (squares[i] !== '') {\n                squares[i] = game.getFiller();\n            }\n        }\n        return squares;\n    }\n\n    troggle() {\n        const { squares, game, notification, level, troggles } = this.state;\n        if (notification === '') {\n            // handle our troggles\n            const response = addTroggle(\n                moveTroggles(troggles, WIDTH, HEIGHT),\n                level,\n                WIDTH,\n                HEIGHT\n            );\n            // change the numbers behind any\n            for (let i = 0; i < response.troggles.length; i++) {\n                const troggle = response.troggles[i];\n                if (\n                    troggle.position !== undefined &&\n                    squares[troggle.position.y * WIDTH + troggle.position.x] !==\n                        ''\n                ) {\n                    squares[troggle.position.y * WIDTH + troggle.position.x] =\n                        game.getFiller();\n                }\n            }\n            this.setState({\n                troggles: response.troggles,\n                status: response.status,\n                squares,\n            });\n            this.troggleMuncherCheck();\n        }\n    }\n\n    keyDown(code) {\n        const { notification, game, muncher } = this.state;\n        if (notification === '') {\n            switch (code) {\n                case 'Space':\n                    this.update(this.munch());\n                    if (this.checkLevel()) {\n                        const { level } = this.state;\n                        this.moveMuncher(2 - muncher.x, 2 - muncher.y);\n                        this.setState({\n                            notification: 'You beat the level!',\n                            level: level + 1,\n                            troggles: [],\n                            status: '',\n                            squares: this.setupBoard(game, {\n                                x: 2,\n                                y: 2,\n                            }),\n                        });\n                    }\n                    break;\n                case 'ArrowLeft':\n                    this.moveMuncher(-1, 0);\n                    break;\n                case 'ArrowRight':\n                    this.moveMuncher(1, 0);\n                    break;\n                case 'ArrowUp':\n                    this.moveMuncher(0, -1);\n                    break;\n                case 'ArrowDown':\n                    this.moveMuncher(0, 1);\n                    break;\n                default:\n                // do nothing\n            }\n        } else if (code === 'Space') {\n            this.setState({ notification: '' });\n        }\n    }\n\n    moveMuncher(xc, yc) {\n        const { muncher } = this.state;\n        this.setState({\n            muncher: {\n                x: Math.min(Math.max(0, muncher.x + xc), WIDTH - 1),\n                y: Math.min(Math.max(0, muncher.y + yc), HEIGHT - 1),\n            },\n        });\n        this.troggleMuncherCheck();\n    }\n\n    troggleMuncherCheck() {\n        const { troggles, muncher } = this.state;\n        let { lives } = this.state;\n        for (let t = 0; t < troggles.length; t++) {\n            const troggle = troggles[t];\n            if (\n                troggle.position !== undefined &&\n                troggle.position.x === muncher.x &&\n                troggle.position.y === muncher.y\n            ) {\n                lives--;\n                muncher.display = 'none';\n                this.setState({\n                    notification: `Yikes! You were eaten by a Trogglus ${troggle.troggle}.`,\n                    lives,\n                    muncher,\n                });\n                this.endGame();\n                break;\n            } else {\n                muncher.display = '';\n                this.setState({ muncher });\n            }\n        }\n    }\n\n    endGame() {\n        const { lives, game } = this.state;\n        if (lives === 0) {\n            this.setState({\n                squares: this.setupBoard(game, { x: 2, y: 2 }),\n                muncher: { x: 2, y: 2 },\n                score: 0,\n                lives: 3,\n                level: 1,\n                notification: 'You lost the game!',\n                troggles: [],\n                status: '',\n            });\n        }\n    }\n\n    munch() {\n        // get and setup our square\n        const { squares, muncher, game } = this.state;\n        const value = squares[muncher.y * WIDTH + muncher.x];\n        squares[muncher.y * WIDTH + muncher.x] = '';\n        this.setState({ squares });\n\n        // determine if we ate something good\n        let isValid = true;\n        if (value !== '') {\n            isValid = game.isCorrect(value);\n        }\n        return { isValid, value };\n    }\n\n    update(inputs) {\n        const { isValid, value } = inputs;\n        let { score, lives } = this.state;\n        const { game } = this.state;\n\n        if (isValid && value !== '') {\n            score += 5;\n        } else if (!isValid) {\n            this.setState({\n                notification: game.getError(value),\n            });\n            lives--;\n        }\n        this.setState({ score, lives });\n        this.endGame();\n    }\n\n    checkLevel() {\n        const { squares, game } = this.state;\n        for (let i = 0; i < squares.length; i++) {\n            if (squares[i] !== '') {\n                if (game.isCorrect(squares[i])) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    render() {\n        const {\n            level,\n            game,\n            muncher,\n            troggles,\n            squares,\n            score,\n            lives,\n            notification,\n            status,\n        } = this.state;\n\n        const munchers = [];\n        for (let i = 0; i < lives; i++) {\n            munchers.push(<span key={i} className=\"life\" />);\n        }\n\n        return (\n            <div className=\"full\">\n                <div className=\"info\">\n                    <div className=\"level\">{`Level: ${level}`}</div>\n                    <div className=\"title\">{game.getTitle()}</div>\n                </div>\n                <Status status={status} />\n                <Board\n                    height={HEIGHT}\n                    width={WIDTH}\n                    troggles={troggles}\n                    muncher={muncher}\n                    squares={squares}\n                    notification={notification}\n                />\n                <div className=\"info\">\n                    <div className=\"score\">\n                        <span>Score:</span>{' '}\n                        <span className=\"points\">{score}</span>\n                    </div>\n                    <div className=\"lives\">{munchers}</div>\n                </div>\n                <Keyboard\n                    up={() => this.keyDown('ArrowUp')}\n                    down={() => this.keyDown('ArrowDown')}\n                    left={() => this.keyDown('ArrowLeft')}\n                    right={() => this.keyDown('ArrowRight')}\n                    space={() => this.keyDown('Space')}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Game;\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport './Menu.css';\nimport Keyboard from '../keyboard/Keyboard';\nimport Options from '../options/Options';\nimport Game from '../game/Game';\n\nclass Menu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: 0,\n        };\n        this.keyDown = this.keyDown.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', (event) => {\n            this.keyDown(event.code);\n        });\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.keyDown);\n    }\n\n    keyDown(code) {\n        switch (code) {\n            case 'Enter':\n                this.select();\n                break;\n            case 'ArrowLeft':\n            case 'ArrowUp':\n                this.select(-1);\n                break;\n            case 'ArrowRight':\n            case 'ArrowDown':\n                this.select(1);\n                break;\n            default:\n            // do nothing\n        }\n    }\n\n    select(movement) {\n        let { selected } = this.state;\n        const { options } = this.props;\n        if (movement === undefined) {\n            const game = options[selected];\n            ReactDOM.render(\n                <Game game={game} />,\n                document.getElementById('root')\n            );\n        } else {\n            selected += movement;\n            if (selected < 0) {\n                selected = options.length - 1;\n            } else if (selected >= options.length) {\n                selected = 0;\n            }\n            this.setState({ selected });\n        }\n    }\n\n    render() {\n        const { question, options, instructions } = this.props;\n        const { selected } = this.state;\n        return (\n            <div className=\"all\">\n                <div className=\"menu\">\n                    <div className=\"text\">{question}</div>\n                    <Options options={options} selected={selected} />\n                    <div className=\"text\">{instructions}</div>\n                </div>\n                <Keyboard\n                    up={() => this.keyDown('ArrowUp')}\n                    down={() => this.keyDown('ArrowDown')}\n                    left={() => this.keyDown('ArrowLeft')}\n                    right={() => this.keyDown('ArrowRight')}\n                    enter={() => this.keyDown('Enter')}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Menu;\n","export const GAME_TYPES = {\n    MULTIPLES: 'Multiples',\n    FACTORS: 'Factors',\n    PRIMES: 'Primes',\n    EQUALITY: 'Equality',\n    INEQUALITY: 'Inequality',\n    CHALLENGE: 'Challenge',\n};\n","import { GAME_TYPES } from './games';\n\nclass Multiples {\n    constructor(minNum = 2, maxNum = 5, maxMult = 5) {\n        this.minNum = minNum;\n        this.maxNum = maxNum;\n        this.minMult = 1;\n        this.maxMult = maxMult;\n\n        this.resetNumber();\n    }\n\n    resetNumber() {\n        const oldNumber = this.number;\n        while (oldNumber === this.number) {\n            this.number = Math.floor(\n                this.minNum + Math.random() * (this.maxNum - this.minNum + 1)\n            );\n        }\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getGame() {\n        return GAME_TYPES.MULTIPLES;\n    }\n\n    getNumber() {\n        return this.number;\n    }\n\n    getTitle() {\n        return `${this.getGame()} of ${this.number}`;\n    }\n\n    getMultiple() {\n        const rand =\n            this.minMult +\n            Math.round(Math.random() * (this.maxMult - this.minMult));\n        return this.number * rand;\n    }\n\n    getNonMultiple() {\n        let nonMultiple = 0;\n        while (this.isCorrect(nonMultiple)) {\n            nonMultiple =\n                Math.floor(Math.random() * (this.maxMult * this.number)) + 1;\n        }\n        return nonMultiple;\n    }\n\n    getFiller() {\n        // 2/5 of our numbers should match\n        if (Math.random() < 0.4) {\n            return this.getMultiple();\n        }\n        // the others will just be random\n        return this.getNonMultiple();\n    }\n\n    isCorrect(factor) {\n        return factor % this.number === 0;\n    }\n\n    getError(factor) {\n        return `\"${factor}\" is not a multiple of \"${this.getNumber()}\".`;\n    }\n}\n\nexport default Multiples;\n","import { GAME_TYPES } from './games';\n\nclass Factors {\n    constructor(minNum = 3, maxNum = 25) {\n        this.minNum = minNum;\n        this.maxNum = maxNum;\n\n        this.resetNumber();\n    }\n\n    resetNumber() {\n        const oldNumber = this.number;\n        while (oldNumber === this.number) {\n            this.number = Math.floor(\n                this.minNum + Math.random() * (this.maxNum - this.minNum + 1)\n            );\n        }\n        this.factors = Array.from(Array(this.number + 1), (_, i) => i).filter(\n            (i) => this.number % i === 0\n        );\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getGame() {\n        return GAME_TYPES.FACTORS;\n    }\n\n    getNumber() {\n        return this.number;\n    }\n\n    getTitle() {\n        return `${this.getGame()} of ${this.number}`;\n    }\n\n    getFactor() {\n        return this.factors[Math.floor(Math.random() * this.factors.length)];\n    }\n\n    getNonFactor() {\n        let nonFactor = 1;\n        while (this.isCorrect(nonFactor)) {\n            nonFactor = 1 + Math.floor(Math.random() * this.number);\n        }\n        return nonFactor;\n    }\n\n    getFiller() {\n        // 2/5 of our numbers should match\n        if (Math.random() < 0.4) {\n            return this.getFactor();\n        }\n        // the others will just be random\n        return this.getNonFactor();\n    }\n\n    isCorrect(factor) {\n        return this.factors.includes(factor);\n    }\n\n    getError(factor) {\n        return `\"${factor}\" is not a factor of \"${this.getNumber()}\".`;\n    }\n}\n\nexport default Factors;\n","import { GAME_TYPES } from './games';\n\nclass Primes {\n    constructor(minNum = 2, maxNum = 7) {\n        const primes = [\n            2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\n            67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\n            139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,\n        ];\n\n        this.primes = primes.filter((x) => x >= minNum && x <= maxNum);\n\n        this.minNum = minNum;\n        this.maxNum = maxNum;\n\n        this.resetNumber();\n    }\n\n    resetNumber() {\n        this.number = null;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getGame() {\n        return GAME_TYPES.PRIMES;\n    }\n\n    getNumber() {\n        return this.number;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getTitle() {\n        return `Prime Numbers`;\n    }\n\n    getPrime() {\n        return this.primes[Math.floor(Math.random() * this.primes.length)];\n    }\n\n    getNonPrime() {\n        let nonPrime = 2;\n        while (this.isCorrect(nonPrime)) {\n            nonPrime = 1 + Math.floor(Math.random() * this.maxNum);\n        }\n        return nonPrime;\n    }\n\n    getFiller() {\n        // 2/5 of our numbers should match\n        if (Math.random() < 0.4) {\n            return this.getPrime();\n        }\n        // the others will just be random\n        return this.getNonPrime();\n    }\n\n    isCorrect(number) {\n        return this.primes.includes(number);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getError(number) {\n        return `The number \"${number}\" is not prime.`;\n    }\n}\n\nexport default Primes;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Menu from './components/menu/Menu';\nimport './index.css';\nimport Multiples from './objects/Multiples';\nimport Factors from './objects/Factors';\nimport Primes from './objects/Primes';\n\nReactDOM.render(\n    <Menu\n        question=\"Which Number Munchers game would you like to play\"\n        options={[new Multiples(), new Factors(), new Primes()]}\n        instructions=\"Use Arrows to move, then press Enter\"\n    />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}