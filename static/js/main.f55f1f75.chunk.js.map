{"version":3,"sources":["components/square/Square.jsx","components/muncher/Muncher.jsx","components/notification/Notification.jsx","components/board/Board.jsx","objects/games.js","objects/Multiples.js","components/game/Game.jsx","index.jsx"],"names":["Square","props","cell","value","id","className","Muncher","ref","el","muncher","style","left","getBoundingClientRect","width","position","x","top","height","y","Notification","message","getRow","r","squares","row","int","push","Board","alert","notification","trim","rows","getRows","GAME_TYPES","IsMultiple","multipleOf","number","setupBoard","oldNumber","type","Array","WIDTH","Math","ceil","random","i","length","numberFill","handleDown","code","state","updateBoard","updateNotification","moveMuncher","updateGame","nextLevel","inputs","isValid","score","lives","compare","slice","toLowerCase","update","munch","checkLevel","rand","floor","GetMultiple","Game","xc","yc","setState","min","max","HEIGHT","initializeGame","level","parent","this","document","addEventListener","event","removeEventListener","munchers","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f55f1f75.chunk.js","sourcesContent":["import React from 'react';\nimport './Square.css';\n\nfunction Square(props) {\n    const { cell, value } = props;\n    return (\n        <div key={cell} id={`c${cell}`} className=\"square\">\n            {value}\n        </div>\n    );\n}\n\nexport default Square;\n","import React from 'react';\nimport './Muncher.css';\n\nfunction Muncher(props) {\n    // let initLeft = 2;\n    // let initTop = 2;\n\n    return (\n        <div\n            ref={(el) => {\n                const muncher = el;\n                if (!muncher) return;\n                muncher.style.left = `${\n                    muncher.getBoundingClientRect().width * props.position.x\n                }px`;\n                muncher.style.top = `${\n                    muncher.getBoundingClientRect().height * props.position.y\n                }px`;\n            }}\n            className=\"muncher\"\n        />\n    );\n}\n\nexport default Muncher;\n","import React from 'react';\nimport './Notification.css';\n\nfunction Notification(props) {\n    const { message } = props;\n    return (\n        <div className=\"notification\">\n            {message}\n            <br />\n            Press Space Bar to continue.\n        </div>\n    );\n}\n\nexport default Notification;\n","import React from 'react';\nimport Square from '../square/Square';\nimport './Board.css';\nimport Muncher from '../muncher/Muncher';\nimport Notification from '../notification/Notification';\n\nfunction Board(props) {\n    const { height, width, squares, muncher, notification } = props;\n    let alert;\n    if (notification != null && notification.trim() !== '') {\n        alert = <Notification message={notification} />;\n    }\n    const rows = getRows(height, width, squares);\n    return (\n        <div className=\"board\">\n            <Muncher position={muncher} />\n            {alert}\n            {rows}\n        </div>\n    );\n}\n\nfunction getRows(height, width, squares) {\n    const rows = [];\n    for (let r = 0; r < height; r++) {\n        const row = getRow(width, r, squares);\n        rows.push(\n            <div key={`row${r}`} className=\"board-row\">\n                {row}\n            </div>\n        );\n    }\n    return rows;\n}\n\nfunction getRow(width, r, squares) {\n    const row = [];\n    for (let cell = 0; cell < width; cell++) {\n        const int = r * width + cell;\n        row.push(<Square key={`c${int}`} cell={int} value={squares[int]} />);\n    }\n    return row;\n}\n\nexport default Board;\nexport { getRows, getRow };\n","export const GAME_TYPES = {\n    MULTIPLES: 'Multiples',\n    FACTORS: 'Factors',\n    PRIMES: 'Primes',\n    EQUALITY: 'Equality',\n    INEQUALITY: 'Inequality',\n    CHALLENGE: 'Challenge',\n};\n","function GetMultiple(multipleOf) {\n    const min = 1;\n    const max = 10;\n    const rand = Math.floor(min + Math.random() * (max - min));\n\n    // 2/5 of our numbers should match\n    if (Math.random() > 0.4) {\n        return Math.floor(Math.random() * (max * multipleOf));\n    }\n    return multipleOf * rand;\n}\n\nfunction IsMultiple(multipleOf, number) {\n    return number % multipleOf === 0;\n}\n\nexport { IsMultiple, GetMultiple };\n","import React from 'react';\nimport './Game.css';\nimport Board from '../board/Board';\nimport { GAME_TYPES } from '../../objects/games';\nimport { GetMultiple, IsMultiple } from '../../objects/Multiples';\n\nconst WIDTH = 6;\nconst HEIGHT = 5;\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        const type = GAME_TYPES.MULTIPLES;\n        const muncher = { x: 2, y: 2 };\n        const { number, squares } = setupBoard(0, type, muncher);\n        this.state = {\n            level: 1,\n            type,\n            number,\n            score: 0,\n            lives: 3,\n            notification: '',\n            muncher,\n            squares,\n        };\n    }\n\n    componentDidMount() {\n        const parent = this;\n        document.addEventListener('keydown', (event) => {\n            handleDown(\n                event.code,\n                parent.state,\n                parent.updateBoard,\n                parent.updateNotification,\n                parent.moveMuncher,\n                parent.updateGame,\n                parent.nextLevel\n            );\n        });\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', handleDown);\n    }\n\n    moveMuncher = (xc, yc) => {\n        const { muncher } = this.state;\n        this.setState({\n            muncher: {\n                x: Math.min(Math.max(0, muncher.x + xc), WIDTH - 1),\n                y: Math.min(Math.max(0, muncher.y + yc), HEIGHT - 1),\n            },\n        });\n    };\n\n    initializeGame = (number, squares) => {\n        const muncher = { x: 2, y: 2 };\n        this.setState({\n            number,\n            squares,\n            muncher,\n            score: 0,\n            lives: 3,\n            level: 1,\n        });\n    };\n\n    nextLevel = (number) => {\n        const { level } = this.state;\n        this.setState({ level: level + 1, number });\n    };\n\n    updateBoard = (squares) => {\n        this.setState({ squares });\n    };\n\n    updateNotification = (notification) => {\n        this.setState({ notification });\n    };\n\n    updateGame = (score, lives) => {\n        this.setState({ score, lives });\n        if (lives === 0) {\n            const { type, number } = this.state;\n            this.updateNotification('You lost the game!');\n            const x = setupBoard(number, type, { x: 2, y: 2 });\n            this.initializeGame(x.number, x.squares);\n        }\n    };\n\n    render() {\n        const {\n            level,\n            type,\n            number,\n            muncher,\n            squares,\n            score,\n            lives,\n            notification,\n        } = this.state;\n\n        const munchers = [];\n        for (let i = 0; i < lives; i++) {\n            munchers.push(\n                <span key={i} className=\"life\">\n                    Mun\n                </span>\n            );\n        }\n\n        return (\n            <div className=\"full\">\n                <div className=\"info\">\n                    <div className=\"level\">{`Level: ${level}`}</div>\n                    <div className=\"title\">{`${type} of ${number}`}</div>\n                </div>\n                <Board\n                    height={HEIGHT}\n                    width={WIDTH}\n                    muncher={muncher}\n                    squares={squares}\n                    notification={notification}\n                />\n                <div className=\"info\">\n                    <div className=\"score\">\n                        <span>Score:</span>{' '}\n                        <span className=\"points\">{score}</span>\n                    </div>\n                    <div className=\"lives\">{munchers}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction setupBoard(oldNumber, type, muncher) {\n    const squares = Array(WIDTH * HEIGHT);\n    let number = oldNumber;\n    while (number === oldNumber) {\n        number = 1 + Math.ceil(Math.random() * 9);\n    }\n    squares[muncher.y * WIDTH + muncher.x] = '';\n    for (let i = 0; i < squares.length; i++) {\n        if (squares[i] !== '') {\n            squares[i] = numberFill(type, number);\n        }\n    }\n    return { number, squares };\n}\n\nfunction handleDown(\n    code,\n    state,\n    updateBoard,\n    updateNotification,\n    moveMuncher,\n    updateGame,\n    nextLevel\n) {\n    const { squares, number, notification, type, muncher } = state;\n    if (notification === '') {\n        switch (code) {\n            case 'Space':\n                update(\n                    munch(state, updateBoard),\n                    state,\n                    updateGame,\n                    updateNotification\n                );\n                if (checkLevel(squares, type, number)) {\n                    updateNotification('You beat the level!');\n                    moveMuncher(2 - muncher.x, 2 - muncher.y);\n                    const { squares, number } = setupBoard(state.number, type, {\n                        x: 2,\n                        y: 2,\n                    });\n                    updateBoard(squares);\n                    nextLevel(number);\n                }\n                break;\n            case 'ArrowLeft':\n                moveMuncher(-1, 0);\n                break;\n            case 'ArrowRight':\n                moveMuncher(1, 0);\n                break;\n            case 'ArrowUp':\n                moveMuncher(0, -1);\n                break;\n            case 'ArrowDown':\n                moveMuncher(0, 1);\n                break;\n            default:\n            // do nothing\n        }\n    } else if (code === 'Space') {\n        updateNotification('');\n    }\n}\n\nfunction numberFill(type, number) {\n    switch (type) {\n        case GAME_TYPES.MULTIPLES:\n            return GetMultiple(number);\n        default:\n            return '';\n    }\n}\n\nfunction munch(state, updateBoard) {\n    // get and setup our square\n    const { squares, muncher, number, type } = state;\n    const value = squares[muncher.y * WIDTH + muncher.x];\n    squares[muncher.y * WIDTH + muncher.x] = '';\n    updateBoard(squares);\n\n    // determine if we ate something good\n    let isValid;\n    switch (type) {\n        case GAME_TYPES.MULTIPLES:\n            isValid = IsMultiple(number, value);\n            break;\n        default:\n            isValid = false;\n    }\n    return { isValid, value };\n}\n\nfunction update(inputs, state, updateGame, updateNotification) {\n    const { isValid, value } = inputs;\n    let { score, lives } = state;\n    const { type, number } = state;\n\n    if (isValid && value !== '') {\n        score += 5;\n    } else if (!isValid) {\n        const compare = type.slice(0, type.length - 1);\n        updateNotification(\n            `\"${value}\" is not a ${compare.toLowerCase()} of \"${number}\".`\n        );\n        lives--;\n    }\n    updateGame(score, lives);\n}\n\nfunction checkLevel(squares, type, number) {\n    for (let i = 0; i < squares.length; i++) {\n        if (squares[i] !== '') {\n            switch (type) {\n                case GAME_TYPES.MULTIPLES:\n                    if (IsMultiple(number, squares[i])) {\n                        return false;\n                    }\n                    break;\n                default:\n                    return false;\n            }\n        }\n    }\n    return true;\n}\n\nexport default Game;\nexport { handleDown, numberFill, munch, update, checkLevel, setupBoard };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/game/Game';\nimport './index.css';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}